generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_PRISMA_URL")
}

model User {
  email             String             @unique
  is_active         Boolean            @default(false)
  is_superuser      Boolean            @default(false)
  is_verified       Boolean            @default(false)
  image             String?
  gender            String?
  first_name        String?
  last_name         String?
  birthday          String?
  phone_number      String?
  zip_code          String?
  city              String?
  state             String?
  reset_id          Int?
  reset_exp         DateTime?
  update_id         Int?
  update_exp        DateTime?
  activate_id       Int?
  activate_exp      DateTime?
  is_setup          Boolean?
  setup_step        String?
  id                String             @id @default(uuid())
  createdAt         DateTime           @default(now())
  password          String
  updatedAt         DateTime           @updatedAt
  bio               String?
  push_token        String?
  Listings          Listings[]         @relation("ListingCreator")
  matches           Matches[]          @relation("User")
  matches2          Matches[]          @relation("User2")
  Message           Message[]
  Notification      Notification[]
  refreshTokens     RefreshToken[]
  ResponsesOnUsers  ResponsesOnUsers[]
  tags              tags[]
  favoritedListings Listings[]         @relation("ListingsFavorited")
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      String
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Question {
  id               String             @id @default(uuid())
  question_text    String
  response         Response[]
  ResponsesOnUsers ResponsesOnUsers[]
}

model Response {
  id               String             @id @default(uuid())
  response         String?
  question_id      String
  question         Question           @relation(fields: [question_id], references: [id])
  ResponsesOnUsers ResponsesOnUsers[]
}

model Interests_Activity {
  option_id   String @id @default(uuid())
  option_text String
  type        String
}

model User_Interests_Activity {
  user_id     String @id @default(uuid())
  option_id   String
  option_text String
  type        String
}

model tags {
  id      String @id @default(uuid())
  tag     String
  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  @@unique([tag, user_id])
}

model ResponsesOnUsers {
  userId     String
  responseId String
  questionId String
  Question   Question @relation(fields: [questionId], references: [id])
  response   Response @relation(fields: [responseId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, responseId, questionId])
}

model Listings {
  id            String   @id @default(uuid())
  name          String
  images        String[]
  city          String
  housing_type  String
  description   String
  price         Float
  petsAllowed   Boolean
  userId        String
  address       String
  bathrooms     Int
  distanceToUcf Int
  rooms         Int
  size          Int
  zipcode       String
  user          User     @relation("ListingCreator", fields: [userId], references: [id])
  favoritedBy   User[]   @relation("ListingsFavorited")
}

model Chat {
  id            String         @id @default(uuid())
  chatName      String
  isGroupChat   Boolean
  users         String[]
  latestMessage String
  groupAdmin    String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
  blocked       String?
  muted         String[]
  Message       Message[]
  Notification  Notification[]
}

model Message {
  id              String   @id @default(uuid())
  userId          String
  content         String
  chatId          String
  createdAt       DateTime @default(now())
  chatItBelongsTo Chat     @relation(fields: [chatId], references: [id])
  sender          User     @relation(fields: [userId], references: [id])
}

model Matches {
  userOneId       String
  userTwoId       String
  matchPercentage Float
  id              String @id @default(uuid())
  User            User   @relation("User", fields: [userOneId], references: [id])
  User2           User   @relation("User2", fields: [userTwoId], references: [id])

  @@unique([userOneId, userTwoId])
}

model Notification {
  userId          String
  chatId          String
  id              String @id @default(uuid())
  chatIdBelongsTo Chat   @relation(fields: [chatId], references: [id])
  receiver        User   @relation(fields: [userId], references: [id])

  @@index([userId, chatId])
}
